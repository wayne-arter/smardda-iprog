Program IPROG, quadrature for shadowed power over regular triangulations, based on
QPROG, example Fortran 95, .doc and rubric files corresponding to CCFE-R(15)34
https://scientific-publications.ukaea.uk/wp-content/uploads/CCFE-R-1534.pdf
http://dx.doi.org/10.13140/RG.2.2.27018.41922
QPROG repo at  git@github.com:wayne-arter/smardda-qprog.git, see QPROG README
for further explanation, QPROG subdirectory doc for report source.

IPROG skeleton produced by

./qprog.bash -l QPROG=sumtot Q=i STR="integral_estimates" BIGOBJ=sum BO=su BSTR="box_and_function"

(The notes below may be easier to understand if strings QPROG, Q, BIGOBJ and BO  are
substituted as indicated by the above .bash command.)

Files input (note that the program-specific file will be used in preference to the generic one)
qprog.txt/sumtot.txt contains the input variables that might be used by a range of different objects/modules
 and the default values for these inputs. These variables form part of the top level control QPROG_t
 for the program. A human readable variable for use in
 a namelist will be generated using the first 3 words of the description of each variable.
 Variables in the file have been copied to QPROG.txt and finish in QPROG_h.f90
bigobj.txt/sum.txt contains the variables defining one object which will normally be defined using the
 instructions resulting from the input variables in qprog.txt, using additional object level controls
 (and of course code to be written by the user).
 Variables in the file have been copied to BIGOBJ.txt  and finish in BIGOBJ_h.f90.

Files output and principal input functions as part of new QPROG  code
QPROG.f90 main program, calls QPROG_readcon  in module QPROG_m.f90
QPROG_h.f90 parameters describing (at least) how to construct first object BIGOBJ as
 Qnumerics_t  which is to  be combined with other object data structures
 such as BIGOBJ_t into type QPROG_t
QPROG_m.f90 input from QPROGparameters in QPROG_readcon, with namelist variables as
 constructed from qprog.txt/sumtot.txt, copied to  Qnumerics_t, *will generally need editing by hand*.
QPROG_case0.ctl input file for QPROG containing complete list of namelists
Qcontrol_h.f90 data structure of generic top level controls for QPROG abbreviated to Q
Qcontrol_m.f90 object of generic top level controls for QPROG  abbreviated to Q, calls BIGOBJ_readcon
 via Qcontrol_read.
BIGOBJ_h.f90 data structure of controls for BIGOBJ in type BOnumerics_t combined into type BIGOBJ_t,
 may need editing by hand for more complex applications.
BIGOBJ_m.f90 reads in object level controls, *will generally need editing by hand*.
config/config.inc determines compiler and options via soft link to indicated file in config subdirectory
makefile.QPROG makefile to compile and link QPROG 

Edits to QPROG_m.f90 have been 
(1) QPROG_dia to call object diagnostics control routine BIGOBJ_dia,
(2) QPROG_solve to select pixel pattern and loop over mesh displacements
(3) QPROG_write to list key input parameters to .out file
(4) QPROG_writeg to call gnuplot output control routine BIGOBJ_writeg,
and edits to BIGOBJ_m.f90
(1) add to BIGOBJ_solve to implement the quadratures
(2) duplicate BIGOBJ_solve as BIGOBJ_solvehex to implement the quadratures over hexagons
(3) add to BIGOBJ_dia for new output to .log file
(4) add to BIGOBJ_writeg and copy to BIGOBJ_writehexg to output picture of tessellation to .gnu file

sumtot.bash sumtot execution is wrappered by this specially written .bash script 
 (needs sumtot.ed, .bash file also contains example gnuplot scripts of type used to produce plots for publication).
sumtot.ed script for extracting data from .log file
ujj04.ctl input file example for scan over mesh displacements
plot_hex0.ctl  input file example for plot of hexagon pattern (as well as scan)
patterns.gnup gnuplot command to produce patterns for publication

Outputs from execution of QPROG with ujj04.ctl using sumtot.bash script 
ujj04.log log data such as date and time of run, cpu measured by internal clocks, calculated quadrature 
ujj04_sumtot.out indicative output, precisely object level controls for BIGOBJ
ujj04.txt output for (gnu)plotting as a function of shadow displacement
ujj04.ps plot of extrema as shadow displacement varies
*terminal* extreme quadratures in the calculation 


Subdirectories for QPROG executable production
config contains files to set compiler options, default gfortran compilation with debug option
develop for developer use, files and script to produce makefile
LIB fixed format style Fortran subroutine library

Subdirectory
srcdoc Documentation may be accessed from srcdoc/html/index.html, after executing
doxygen doxyfile

Other subdirectories
doc produce latest version of CCFE-R(15)34 from f90 files, see local README
TEST outputs to compare specialist example .ctl and .dat files setting a .dat file as input

Other repos
smardda/develop contains codvar.bash which converts to qprog.txt from an abbreviated input that includes
LaTeX variables, see covar_test.txt conversion to codvar_test.out


Updating auto-generated QPROG code
----------------------------------
At present, there is limited scope for updating, indeed repeated use of qprog.bash should be
avoided as likely to overwrite user-written code. The most likely need for new input variables
can be addressed by use of the variables provided as defaults, viz. 
general_real_parameters, number_of_real_parameters, general_integer_parameters and number_of_integer_parameters
which map as follows into Qnumerics namelist variables
selfn%nrpams=number_of_real_parameters
selfn%nipams=number_of_integer_parameters
selfn%rpar=general_real_parameters(:number_of_real_parameters)
selfn%npar=general_integer_parameters(:number_of_integer_parameters)
and will come into play when setting the namelist variable sumtot_formula='additional'

This use is complicated by the fact that the same four "PAMS" variable names (short or long forms)
together with  the  bigobj_formula variable necessarily appear in two places,
as there are two big objects produced by qprog.bash, namely sumtot and sum. It helps anyway to explain
the structure for controlling input which is generic:
The split adopted in sumtot.f90 is first, to initialise the control
structure (icontrol_h, methods in icontrol_m.f90), which of course
now consists of a hierarchy of control structures, one for each object
(referred to as a sub-object) forming sumtot_h. Each control
structure, typically qnumerics_h some q, is initialised as one or
more namelists in a single input file, when icontrol_read calls
structure_readcon, making use of the optional unit number argument.
(Program nucode also has a routine Qcontrol_fix which might be
used e.g. to enforce consistency on the various control structures.)

In the present example, 
(1) sumtot is described by a namelist sumtotparameters which is
used to set object sumtot%n of type inumerics containing the PAMS variables among others
(2) sum is described by a namelist sumparameters which is
used to set object sumtot%sum%n of type sunumerics containing the PAMS variables among others
(since object sum is a sub-object of sumtot).
icontrol_m  initialises by default 3 namelists designed to define global control variables 
file, param and plot for sumtot, respectively progfiles, miscparameters and plotselections.
(The miscellaneous parameters are a character string, an integer, a real and a logical.)
Thereafter, icontrol_read calls 
(1) sumtot_readcon to read in type inumerics, check the validity of the inputs and assign to sumtot%n
(2) sum_readcon to read in type sunumerics, check the validity of the inputs and assign to sumtot%sum%n
A special feature of the relatively simple qprog represented by sumtot is that all the variables in the 
sub-object of type sunumerics are set by copying their counterparts in inumerics 
(effectively sumtot%sum%n=sumtot%n), EXCEPT for the PAMS variables and bigobj_formula.
